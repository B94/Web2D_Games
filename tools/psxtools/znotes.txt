info.sonicretro.org/SPG:Solid_Tiles

	The Mega Drive games use angles in hex,
	$00 through $FF,
	meaning that there are only 256 divisions of a circle,
	not 360 like we're used to.
	Worse, the direction is anti-clockwise compared to other languages like GML,
	so $20 isn't 45 degree like it should be - it's 315 degree.

	In order to convert the original hex angles into angles you can use in GML,
	use this calculation (rendered here in pseudo-code):

	return (256-hex_angle)*1.40625;

gamedev.stackexchange.com/questions/86755/how-to-calculate-corner-positions-marks-of-a-rotated-tilted-rectangle

	// cx, cy - center of square coordinates
	// x, y - coordinates of a corner point of the square
	// theta is the angle of rotation
	// translate point to origin
	float tempX = x - cx;
	float tempY = y - cy;

	// now apply rotation
	float rotatedX = tempX*cos(theta) - tempY*sin(theta);
	float rotatedY = tempX*sin(theta) + tempY*cos(theta);

	// translate back
	x = rotatedX + cx;
	y = rotatedY + cy;

stackoverflow.com/questions/20530949/2d-rotation-is-leaving-holes

	The way to avoid having gaps in between valid pixels is to work backwards.
	Rather than taking each pixel in the source image and moving it
	to its place in the destination image by rotating the pixel to a new position,
	you should iterate through each pixel in the destination image
	and figure out which pixel in the source image it corresponds to.

	To do this you just need to go through each pixel (xdraw,ydraw)
	in the destination image and apply the inverse rotation
	to get the corresponding pixel (xorig,yorig) in the source image.

forum.yoyogames.com/index.php?threads/sprites-got-jagged-when-rotating.5258/

	The program is trying to rotate the pixels,
	it doesn't know that the circle is a circle,
	all it knows is to rotate the pixels,
	so it becomes jagged.
	this also happens when rotating most sprites in an image editor,
	not much can be fixed about it.

	You other option is to use effects to blur the edges like anti-aliasing and interpolation
	but those effects will also look bad the more low res they are.

docs.gimp.org/en/gimp-concepts-layer-modes.html
	For each pixel in the upper (Mask) and lower (Image) layer,
	to form the E resulting pixel's color.

	layer mode "Normal"
		E = M
	layer mode "Multiply"
		E = (M * I) / 255
	layer mode "Divide"
		E = (256 * I) / (M + 1)
	layer mode "Screen"
		E = (255 - M) * (255 - I)
		E = 255 - (E / 255)
	layer mode "Overlay"
		E = (2 * M) / 255
		E = I + E * (255 - I)
		E = (I / 255) * E
	layer mode "Dodge"
		E = (256 * I) / (255 - M + 1)
	layer mode "Burn"
		E = (255 - I) / (M + 1)
		E = 255 - (256 * E)
	layer mode "Hard Light" M > 128
		E = 255 - 2 * (M - 128)
		E = E * (255 - I)
		E = 255 - (E / 256)
	layer mode "Hard Light" M <= 128
		E = (2 * M * I) / 256
	layer mode "Soft Light"
		RS = (Screen)E
		E = (255 - I) * M + RS
		E = (E / 255) * I
	layer mode "Grain extract"
		E = I - M + 128
	layer mode "Grain merge"
		E = I + M + 128
	layer mode "Difference"
		E = |I - M|
	layer mode "Addition"
		E = min(M + I , 255)
	layer mode "Subtraction"
		E = max(I - M , 0)
	layer mode "Darken only"
		E = min(M , I)
	layer mode "Lighten only"
		E = max(M , I)

stackoverflow.com/questions/12011081/alpha-blending-2-rgba-colors-in-c

	int blend(unsigned char result[4], unsigned char fg[4], unsigned char bg[4])
	{
		unsigned int alpha = fg[3] + 1;
		unsigned int inv_alpha = 256 - fg[3];
		result[0] = (unsigned char)((alpha * fg[0] + inv_alpha * bg[0]) >> 8);
		result[1] = (unsigned char)((alpha * fg[1] + inv_alpha * bg[1]) >> 8);
		result[2] = (unsigned char)((alpha * fg[2] + inv_alpha * bg[2]) >> 8);
		result[3] = 0xff;
	}

stackoverflow.com/questions/9014729/manually-alpha-blending-an-rgba-pixel-with-an-rgb-pixel

	A typical "Over" blend is done in the following way:

		outputRed = (foregroundRed * foregroundAlpha) + (backgroundRed * (1.0 - foregroundAlpha));

	And then repeating for the blue and green channels.
	Do this for every pixel.

stackoverflow.com/questions/13002979/how-to-calculate-rotation-angle-from-rectangle-points

	If the shape is not rotated more than 90 degree,
	you can use the tanget ratio of a right angle triangle:

		var rotationRadians = Math.atan((x1 - x4) / (y1 - y4));
		var RAD2DEG = 180 / Math.PI;
		var rotationDegrees = rotationRadians * RAD2DEG;

	If the rotation is greater than 90 degree but less than 180 degree,
	you will need to add 180 degree:

		rotationDegrees += 180;

stackoverflow.com/questions/2992264/extracting-a-quadrilateral-image-to-a-rectangle

	Look up "quad to quad" transform, e.g. threeblindmiceandamonkey.
	A 3x3 transform on 2d homogeneous coordinates can transform
	any 4 points (a quad) to any other quad;
	conversely, any fromquad and toquad,
	such as the corners of your truck and a target rectangle,
	give a 3 x 3 transform.

stackoverflow.com/questions/299267/image-scaling-and-rotating-in-c-c

	The simplest way to scale is:
		dest[dx,dy] = src[ dx*src_width/dest_width , dy*src_height/dest_height ]
	For rotating, the src pixel location can be calculated using a rotation matrix:
		sx,sy = M(dx,dy)

	Mapping for a resize is easy:
		x' = x * ( width' /  width)
		y' = y * (height' / height)
	Mapping for rotation is only a little bit harder.
		x' = x * cos(a) + y * sin(a)
		y' = y * cos(a) - x * sin(a)

stackoverflow.com/questions/50255282/webgl2-has-anti-alias-automatically-built-in

	No, it's only a request, not a requirement.
	WebGL2 allows you to create antialiased renderbuffers with renderbufferStorageMultisample
	and resolve them using blitFramebuffer,
	a feature which was not available in WebGL1.
	Rendering to an antialiased framebuffer and then blitting that to the canvas
	is a way to force antialiasing, at least in WebGL2.

stackoverflow.com/questions/17224795/antialiasing-not-working-in-three-js

	Took me all afternoon to figure out on my system under chrome settings
	I didn't have checked "allow hardware acceleration when available",
	and viola, antialiasing is now working.

askubuntu.com/questions/40024/how-do-i-delete-a-directory-from-a-zip-file-using-a-bash-script

	If you want to delete all files from a specific dir, you could do this:
		zip --delete file.zip "assets/*"  "*.ext"

sevenzip.osdn.jp/chm/cmdline/commands/delete.htm

deletes *.bak files from archive archive.zip.
	7z d archive.zip *.bak -r

stackoverflow.com/questions/8985588/webgl-canvas-coordinates-to-3d-coords

	Basically if you want to draw in 2D use a 2D shader, don't try messing with a 3D shader.
	WebGL draws in clipspace so all you need to do is convert from pixels to clip space.
		attribute vec2 a_position;
		uniform   vec2 u_resolution;

		void main() {
			// convert positions from pixels to 0.0 to 1.0
			vec2 zeroToOne = a_position / u_resolution;

			// convert from 0->1 to 0->2
			vec2 zeroToTwo = zeroToOne * 2.0;

			// convert from 0->2 to -1->+1 (clipspace)
			vec2 clipSpace = zeroToTwo - 1.0;

			gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);
		}

stackoverflow.com/questions/30445467/webgl-vs-css3d-for-large-scatter-plot-of-images

	The way game engines run fast is BY OPTIMIZING WHAT THEY DRAW!
	They draw as little as possible.
	They combine textures into text atlases,
	they combine meshes into large meshes.
	They get their draw calls down to a < 5000, often under 1000.

forums.codeguru.com/showthread.php?259953-Code-to-create-Color-Gradient-programatically

	GRADIENT_FILL_TRIANGLE
	The triangle's vertices are defined as V1, V2, and V3.
	Point P is inside the triangle.
	Draw lines from P to V1, V2, and V3 to form three sub-triangles.
	Let ai denote the area of the [sub-triangle] opposite Vi for i=1,2,3.
	The color at point P is computed as:
		  RedP = (  RedV1 * a1 +   RedV2 * a2 +   RedV3 * a3) / (a1+a2+a3)
		GreenP = (GreenV1 * a1 + GreenV2 * a2 + GreenV3 * a3) / (a1+a2+a3)
		 BlueP = ( BlueV1 * a1 +  BlueV2 * a2 +  BlueV3 * a3) / (a1+a2+a3)

	GRADIENT_FILL_RECT_H
	The rectangle's top-left point is V1 and the bottom-right point is V2.
	Point P is inside the rectangle.
	The color at point P is given by:
		  RedP = (  RedV2 * (Px-V1x) +   RedV1 * (V2x-Px)) / (V2x-V1x)
		GreenP = (GreenV2 * (Px-V1x) + GreenV1 * (V2x-Px)) / (V2x-V1x)
		 BlueP = ( BlueV2 * (Px-V1x) +  BlueV1 * (V2x-Px)) / (V2x-V1x)

	GRADIENT_FILL_RECT_V
	The rectangle's top-left point is V1 and the bottom-right point is V2.
	Point P is inside the rectangle.
	The color at point P is given by:
		  RedP = (  RedV2 * (Py-V1y) +   RedV1 * (V2y-Py)) / (V2y-V1y)
		GreenP = (GreenV2 * (Py-V1y) + GreenV1 * (V2y-Py)) / (V2y-V1y)
		 BlueP = ( BlueV2 * (Py-V1y) +  BlueV1 * (V2y-Py)) / (V2y-V1y)

stackoverflow.com/questions/22657381/batch-opening-a-webpage-using-the-default-browser

	would only open with your default browser (which is not necessarily Chrome)
		start http://www.google.com

	If you want it to open only in Google Chrome
		start "" "C:\Your-Chrome-Path-Here\chrome.exe" https://google.com

stackoverflow.com/questions/28852942/how-do-i-kill-a-specific-process-running-in-the-background-from-the-command-prom

	you can write in the exact name of the task to kill,
		taskkill /IM firefox.exe /F

	or you can check the PID of specific task by writing Tasklist, and then kill the task by mentioning its PID
		tasklist
		taskkill /PID 26356 /F

superuser.com/questions/198525/how-can-i-execute-a-windows-command-line-in-background

	unix
		program &
	windows
		START /B program
		START /MIN program
		START /B "" php -S 0.0.0.0:8000 &

superuser.com/questions/571463/how-do-i-append-a-bunch-of-wav-files-while-retaining-not-zero-padded-numeric

	If all the files have the same parameters, like sample rate and number of channels, you still can't just catenate them.
	You have to strip away the WAV header.
	It may be easiest to use an audio file manipulation utility like sox, which contains a method for catenating files.
	In fact, it does this by default.

		sox  short1.wav  short2.wav  short3.wav  long.wav

legacy.imagemagick.org/discourse-server/viewtopic.php?t=19297

	The best way from command line is to either use a -format FX/Pixel escape to get a specific pixel values,
	or to crop the image down to just that one pixel and then use format or txt: output.

		convert rose: -format  '%[pixel:p{40,30}]' info:-
		convert rose: -format '#%[hex:p{40,30}]'   info:-
		convert rose: -crop 1x1+40+30 -depth 8 txt:

stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript

	Deep copy by performance: Ranked from best to worst
		spread operator ...            (primitive arrays - only)
		splice(0)                      (primitive arrays - only)
		slice()                        (primitive arrays - only)
		concat()                       (primitive arrays - only)
		custom function, as seen below (any array)
		jQuery's $.extend()            (any array)
		JSON.parse(JSON.stringify())   (primitive and literal arrays - only)
		Underscore's _.clone()         (primitive and literal arrays - only)
		Lodash's _.cloneDeep()         (any array)

	Where:
		primitives = strings, numbers, and booleans
		literals   = object literals {}, array literals []
		any        = primitives, literals, and prototypes

geom.at/products/fade2d/

	A Delaunay triangulation is always convex.
	You must insert the segments of your concave polygon,
	define a zone and retrieve the triangles of the non-convex area.

sites.google.com/site/misbullah/posts/howtocreatesilenceaudiousingsox

	sox -n -r 16000 -c 1 silence0.4.wav trim 0.0 0.4
		-n : no input (null file handle)
		-r : sampling rate (16000 Hz)
		-c : channel (1 for mono, 2 for stereo)

	The above command will create a silence audio with the length is 0.4 seconds.
